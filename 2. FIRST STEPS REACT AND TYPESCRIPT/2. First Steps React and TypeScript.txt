# 2. FIRST STEPS: REACT AND TYPESCRIPT
--------------------------------------

* Introduction to TypeScript with React
---------------------------------------
. Basics of a TypeScript project:
	
"@types/jest": "^27.5.2",
"@types/node": "^16.18.96",
"@types/react": "^18.2.79",

These files support the custom type definitions that come with a React project such as jest, node and react types.  

tsconfig.json
-------------
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}


This is the one file neede to be able to use TypeScript in the project.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Basic types
-------------

This is how we define a type for our variables:

let firstValue: string = 'Manny';
let firstValue: number = 34;
let firstValue: boolean = true;

In order to define the type of an array we do this:

let firstValue: number[] = [2, 3, 56];

Or we can do this: (For example in the case that we are creating an array of strings):

let firstValue: Array<string> = ['2', '3', 'manny'];

App.tsx
-------
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  render() {
    //let firstValue: string = 'Manny';
    //let firstValue: number = 34;
    //let firstValue: boolean = true;
    //let firstValue: number[] = [2, 3, 56];
    let firstValue: Array<string> = ['2', '3', 'manny'];
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p>
            The value {firstValue} is of { typeof firstValue} type!
          </p>
        </header>
      </div>
    );
  }

}

export default App;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Other complex types
---------------------

. Tuple
-------
A tuple is a type of array that you can insert multiple types.

let aTuple: [string, number] = ['Manny', 34];

. enum
------
They are similar to objects.

 enum Codes {first = 1, second = 2};

. any
-----
Use any when you are not sure what the type should be.

let firstName: any = 3;

. void
------
We use void for example for functions return types:

 const warning = (): void => {
      console.log('Warning');
    }

App.tsx
-------
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  render() {
    //let firstValue: string = 'Manny';
    //let firstValue: number = 34;
    //let firstValue: boolean = true;
    //let firstValue: number[] = [2, 3, 56];
    //let firstValue: Array<string> = ['2', '3', 'manny'];

    // tuple
    let aTuple: [string, number] = ['Manny', 34];

    // enum
    enum Codes {first = 1, second = 2};

    // any
    //let firstName: any = 'Manny';
    let firstName: any = 3;

    // void
    const warning = (): void => {
      console.log('Warning');
    }

    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p>
            {/* The value {aTuple[0]} is of { typeof aTuple[0]} type! */}
            The value {firstName} is of { typeof firstName} type!
          </p>
        </header>
      </div>
    );
  }

}

export default App;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functional/stateless component intro
--------------------------------------
A functional component at its core is a javaScript function that returns html.

With typeScript:
----------------
. We define what are the types we pass into the function's arguments, and also the return type.

For now, we have:

App.tsx
-------
import logo from './logo.svg';
import './App.css';
import Message from './Message';

class App extends Component {
  render() { 
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <Message />
        </header>
      </div>
    );
  }

}

export default App;

Message.tsx
-----------
import React from 'react';

const Message = () => {
    return (
        <p>This is a quick message!!!</p>
    )
}

export default Message;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functional/stateles component syntax
--------------------------------------
When we have components that accept props in typescript, we need to specify the type:

Message.tsx
-----------
import React from 'react';

const Message = (prop: {message: string}): any => { ---> Here we specify the return type that is any, but React will infer that is any if we don't specify it here.
    return (
        <p>This is a quick message!!!</p>
    )
}

export default Message;

App.tsx
-------
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import Message from './Message';

class App extends Component {
  render() { 
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <Message message='This is a simple message'/>
        </header>
      </div>
    );
  }

}

export default App;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Class/stateful component intro
--------------------------------

. Class
-------
Allows the programmer to crete a type of blueprint for specific code and attach methods and other properties that can be leveraged later.

. Example - Warrior Class
-------------------------

class Warrior {
	strength: number;
	agility: number;

	constructor(strength, agility) {
		this.strength = strenght;
		this.agility = agility;
	}

	fight() {
		return this.strength *  this.agility;
	}
}

We can extend the Warrior class to a Ninja class:

class Ninja extends Warrior {
	shuriken: number;

	constructor (shuriken, strength, agility) {
		super strength, agility;
		this.shuriken = shuriken;
	}

	throwShuriken(shuriken) {
		return shuriken ? "Shuriken thrown" : "No shuriken left";
	}
}

. Class methods in React are created extending the Component class in the React library. ---> THIS GIVES US ACCESS TO LYFECYCLE METHODS AND STATE.

. If you have to create class methods, try to always create functional components first.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Class/stateful component syntax
---------------------------------
Let's explore some lyfecycle methods.  For example componentWillMount()

componentWillMount() will run as your component will mount. ---> This is before.

componentDidMount() will run when the component is mounted. ---> This is once the component is mounted.

App.tsx
-------
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import Message from './Message';

class App extends Component<any> {
  componentWillMount() {
    console.log('Almost there...');
  }

  componentDidMount() {
    console.log('Finally...hello!');
  }

  render() { 
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <Message message='This is a simple message'/>
        </header>
      </div>
    );
  }

}

export default App;

------------------------------------------------------------------------------------------------------------------------------------------------------------------




























































































































































 






























































