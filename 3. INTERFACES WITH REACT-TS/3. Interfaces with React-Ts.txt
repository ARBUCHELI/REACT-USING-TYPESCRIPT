# 3. INTERFACES WITH REACT/TS
-----------------------------

* Introduction to interface
---------------------------
We use interfaces to define how the shape of our data would look like, and the types associated with the properties.

. Interfaces are only used by the compiler to check for types and validate to make sure that we are using the proper types upon compiling.

. Interfaces only can be created when the project is configured with typeScript.

App.tsx
-------
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import Message from './Message';

class App extends Component<any> {
  render() { 
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <Message name='Manny' message='this is a simple message'/>
        </header>
      </div>
    );
  }

}

export default App;

Message.tsx
-----------
import React from 'react';

interface UserMessage {
    name: string;
    message: string;
}

const Message = (props: UserMessage): any => {
    return (
        <p>{props.name}, {props.message}</p>
    )
}

export default Message;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Define our state
------------------
When using typescript, we need to define the type of the state.

App.tsx
-------
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import Message from './Message';

// Define the state
const initialState = {
  name: 'Manny',
  message: 'TypeScript is cool!!'
}

// Define the type of the state
type State = Readonly<typeof initialState>;

class App extends Component<any, State> {
  readonly state: State = initialState;
  render() { 
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <Message name={this.state.name} message={this.state.message}/>
        </header>
      </div>
    );
  }

}

export default App;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review best practices interfaces
----------------------------------
. Don't show in the compiled javaScript code.

. Specially used for props in the components.

. Proper method
---------------
	Define props in the interface
	
	Pass them into the component

. When we need to use optional properties
	If the data passed is missing one or two properties --> We can use a question mark

Interface Warrior {
	money?: number
}

. readOnly --> items that can only be read once created --> ONLY ALLOW TO CREATE THE VALUE ONCE AND THEN YOU CAN'T CHANGE IT

IF YOU CREATE AN INTERFACE WITH READONLY PROPERTIES IT MEANS THESE PROPS IN YOUR REACT COMPONENT CAN ONLY BE CREATED ONCE AND NOT BE CHANGED AFTER THE FACT.

. Interfaces can also be used to define function types
------------------------------------------------------

interface SearchFunc {
	(source: string, subString: string): boolean;
}

let mySearch: searchFunc;

mySearch = function(source: string, subString: string) {
	let result = source.search(subString);
	return result > -1;
}































































